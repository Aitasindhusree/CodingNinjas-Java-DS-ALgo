package queues;

import LS.Node;

public class queueUsingLL <T> {
   private Node<T> front;
   private Node<T> rear;
   int size;
   
   public queueUsingLL() {
	   front=null;
	   rear=null;
	   size=0;
   }
   public int size() {
	   return size;
   }
   public boolean isEmpty() {
       if(rear==null){
           return true;
       }
       else
           return false;
   }
   public T front() throws queueEmptyException {
	   if(size==0) {
		   throw new queueEmptyException();
	   }
	   return front.data;
   }
   public void enqueue(T elem) {
	   Node<T> newNode=new Node<>(elem);
	   if(size==0) {
		   front=newNode;
		   rear=newNode;  
	   }
	   else {
		   rear.next=newNode;
		   rear=newNode;
	   }
	   size++;
   }
   public T dequeue() throws Exception{
	   if(size==0) {
		   throw new queueEmptyException();
	   }
	   else {
		    T element=front.data;
            front=front.next;
	        size--;
	        return element;
	   }
   }
}
