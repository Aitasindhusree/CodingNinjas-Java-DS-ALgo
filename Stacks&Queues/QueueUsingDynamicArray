package queues;

public class queueUsingArray {
	private int data[];
	private int front; // index at which front element is stored
	private int rear; // index at which rear element is stored
	private int size;
	
	public queueUsingArray() {
		data = new int[10];
		front = -1;
		rear = -1;
		size = 0;
	}
	public queueUsingArray( int capacity) {
		data = new int[capacity];
		front = -1;
		rear = -1;
		size = 0;
	}

	int size(){
		return size;
	}
	
	boolean isEmpty(){
		return size == 0;
	}

	int front() throws queueEmptyException{
		if(size == 0){
			throw new queueEmptyException();
		}
		return data[front];
	}
	
	void enqueue(int element) throws queueFullException{
		
		if(size == data.length){
		    //throw new queueFullException();	
			doublecapacity();}
		if(size == 0){
			front = 0;
		}
		size++;
		rear++;
		data[rear] = element; 
	}
	
	private void doublecapacity() {
    	int temp[]=data;
    	data=new int[2*temp.length];
    	int index=0;
    	
    	for(int i=front;i<temp.length;i++) {
    		data[index]=temp[i];
    		index++;
    	}
    	front=0;
    	rear=temp.length-1;
    }
	
	int dequeue() throws queueEmptyException{
		if(size == 0){
			throw new queueEmptyException();
		}
		int temp = data[front];
		front++;
		size--;
		if(size == 0){
			front = -1;
			rear = -1;
		}
		return temp;
	}}
	
