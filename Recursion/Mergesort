/*Sort an array A using Merge Sort.
Change in the input array itself. So no need to return or print anything.
INPUT FORMAT
Line 1 : Integer n i.e. Array size
Line 2 : Array elements (separated by space)
OUTPUT FORMAT
Array elements in increasing order (separated by space)
CONSTRAINTS
1 <= n <= 10^3
SAMPLE INPUT
6 
2 6 8 5 4 3
SAMPLE OUTPUT
2 3 4 5 6 8
CODE:*/
package Recursion2;

public class mergesort {

	public static void merge(int[] input,int si,int ei){
        int[] output=new int[ei-si+1];
        int k=0;
        int mid = (si+ei)/2;
        int i=si;
        int j=mid+1;
        while(i<=mid && j<=ei) {
        	if(input[i]<input[j]) {
        		output[k]=input[i];
        		i++;
        		k++;
        	}
        	else {
        		output[k]=input[j];
        		j++;
        		k++;}
        	
        }
        while(i<=mid) {
        	output[k]=input[i];
        	i++;
        	k++;
        }
        while(j<=ei) {
        	output[k]=input[j];
        	j++;
        	k++;
        }
        for(int index=0;index<output.length;index++) {
        	input[si+index]=output[index];
        }
        
        
    }
    
    
    private static void mergerSort1(int[] input,int si,int ei){
        if(si>=ei) {
        	return;
        }
    	int mid =(si+ei)/2;
        mergerSort1(input,si,mid);
        mergerSort1(input,mid+1,ei);
        merge(input,si,ei);
        
    }
    
    
    public static void mergeSort(int[] input){
	   
    	mergerSort1(input,0,input.length-1);
		
	}
	public static void main(String[] args) {
	  int input[]= {5,8,3,9,10,67,34,56,78,22};
	  mergeSort(input);
      for(int x=0;x<input.length;x++) {
    	  System.out.print(input[x]+" ");
      }
	}

}
