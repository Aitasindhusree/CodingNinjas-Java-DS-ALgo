/*Given an integer array (of length n), find and return all the subsets of input array.
Subsets are of length varying from 0 to n, that contain elements of the array. But the order of elements should remain same as in the input array.
Note : The order of subsets are not important.
Input format :

Line 1 : Size of array

Line 2 : Array elements (separated by space)

Sample Input:
3
15 20 12
Sample Output:
[] (this just represents an empty array, don't worry about the square brackets)
12 
20 
20 12 
15 
15 12 
15 20 
15 20 12 */
package Recursion2;

public class findallsubsets {

	public static int[][] subset(int input[]) {

		int[][] a = subset(input, 0);

		return a;

		}

		public static int[][] subset(int input[], int start) {

		if ( start == input.length) {

		int output[][] = new int[1][0];

		return output;

		}

		int smallAns[][] = subset(input, start + 1);

		int output[][] = new int[smallAns.length * 2][];

		int k = 0;

		for (int i = 0; i < smallAns.length; i++) {

		output[k] = new int[smallAns[i].length];

		for (int j = 0; j < smallAns[i].length; j++) {

		output[i][j] = smallAns[i][j];

		}

		k++;

		}

		for (int i = 0; i < smallAns.length; i++) {

		output[k] = new int[smallAns[i].length + 1];

		output[k][0] = input[start];

		for (int j = 1; j <= smallAns[i].length; j++) {

		output[k][j] = smallAns[i][j - 1];

		}

		k++;

		}

		return output;

		}
	public static void main(String[] args) {
		int input[]= {3,2,5};
		int output[][]=subset(input);
		
	for(int i=0;i<output.length;i++) {
		for(int j=0;j<output[i].length;j++) {
			System.out.print(output[i][j]+" ");
		}
		System.out.println();
	}
	}

}
